#ifndef KStruct_h
#define KStruct_h

#define CS_VALID 0x0000001 /* dynamically valid */
#define CS_ADHOC 0x0000002 /* ad hoc signed */
#define CS_GET_TASK_ALLOW 0x0000004 /* has get-task-allow entitlement */
#define CS_INSTALLER 0x0000008 /* has installer entitlement */

#define CS_HARD 0x0000100 /* don't load invalid pages */
#define CS_KILL 0x0000200 /* kill process if it becomes invalid */
#define CS_CHECK_EXPIRATION 0x0000400 /* force expiration checking */
#define CS_RESTRICT 0x0000800 /* tell dyld to treat restricted */
#define CS_ENFORCEMENT 0x0001000 /* require enforcement */
#define CS_REQUIRE_LV 0x0002000 /* require library validation */
#define CS_ENTITLEMENTS_VALIDATED 0x0004000

#define CS_ALLOWED_MACHO 0x00ffffe

#define CS_EXEC_SET_HARD 0x0100000 /* set CS_HARD on any exec'ed process */
#define CS_EXEC_SET_KILL 0x0200000 /* set CS_KILL on any exec'ed process */
#define CS_EXEC_SET_ENFORCEMENT 0x0400000 /* set CS_ENFORCEMENT on any exec'ed process */
#define CS_EXEC_SET_INSTALLER 0x0800000 /* set CS_INSTALLER on any exec'ed process */

#define CS_KILLED 0x1000000 /* was killed by kernel for invalidity */
#define CS_DYLD_PLATFORM 0x2000000 /* dyld used to load this is a platform binary */
#define CS_PLATFORM_BINARY 0x4000000 /* this is a platform binary */
#define CS_PLATFORM_PATH 0x8000000 /* platform binary by the fact of path (osx only) */

#define CS_DEBUGGED 0x10000000 /* process is currently or has previously been debugged and allowed to run with invalid pages */
#define CS_SIGNED 0x20000000 /* process has a signature (may have gone invalid) */
#define CS_DEV_CODE 0x40000000 /* code is dev signed, cannot be loaded into prod signed code (will go away with rdar://problem/28322552) */


extern uint32_t* offsets;

enum kernel_offset {
    /* struct task */
    KSTRUCT_OFFSET_TASK_LCK_MTX_TYPE,
    KSTRUCT_OFFSET_TASK_REF_COUNT,
    KSTRUCT_OFFSET_TASK_ACTIVE,
    KSTRUCT_OFFSET_TASK_VM_MAP,
    KSTRUCT_OFFSET_TASK_NEXT,
    KSTRUCT_OFFSET_TASK_PREV,
    KSTRUCT_OFFSET_TASK_ITK_SELF,
    KSTRUCT_OFFSET_TASK_ITK_SPACE,
    KSTRUCT_OFFSET_TASK_BSD_INFO,
    KSTRUCT_OFFSET_TASK_ALL_IMAGE_INFO_ADDR,
    KSTRUCT_OFFSET_TASK_ALL_IMAGE_INFO_SIZE,
    KSTRUCT_OFFSET_TASK_TFLAGS,
    KSTRUCT_OFFSET_TASK_LOCK,
    
    /* struct ipc_port */
    KSTRUCT_OFFSET_IPC_PORT_IO_BITS,
    KSTRUCT_OFFSET_IPC_PORT_IO_REFERENCES,
    KSTRUCT_OFFSET_IPC_PORT_IKMQ_BASE,
    KSTRUCT_OFFSET_IPC_PORT_MSG_COUNT,
    KSTRUCT_OFFSET_IPC_PORT_IP_RECEIVER,
    KSTRUCT_OFFSET_IPC_PORT_IP_KOBJECT,
    KSTRUCT_OFFSET_IPC_PORT_IP_PREMSG,
    KSTRUCT_OFFSET_IPC_PORT_IP_CONTEXT,
    KSTRUCT_OFFSET_IPC_PORT_IP_SRIGHTS,
    
    /* struct proc */
    KSTRUCT_OFFSET_PROC_PID,
    KSTRUCT_OFFSET_PROC_P_FD,
    KSTRUCT_OFFSET_PROC_TASK,
    KSTRUCT_OFFSET_PROC_UCRED,
    KSTRUCT_OFFSET_PROC_P_LIST,
    KSTRUCT_OFFSET_PROC_P_CSFLAGS,
    KSTRUCT_OFFSET_PROC_P_MEMSTAT_STATE,
    KSTRUCT_OFFSET_PROC_MLOCK,
    KSTRUCT_OFFSET_PROC_UCRED_MLOCK,
    KSTRUCT_OFFSET_PROC_SVUID,
    KSTRUCT_OFFSET_PROC_SVGID,
    KSTRUCT_OFFSET_PPOC_NAME,
    KSTRUCT_OFFSET_P_TEXTVP,
    KSTRUCT_OFFSET_CSB_BLOB_PLATFORM_BINARY,
    
    /* struct filedesc */
    KSTRUCT_OFFSET_FILEDESC_FD_OFILES,
    
    /* struct fileproc */
    KSTRUCT_OFFSET_FILEPROC_F_FGLOB,
    
    /* struct fileglob */
    KSTRUCT_OFFSET_FILEGLOB_FG_DATA,
    
    /* struct socket */
    KSTRUCT_OFFSET_SOCKET_SO_PCB,
    
    /* struct pipe */
    KSTRUCT_OFFSET_PIPE_BUFFER,
    
    /* struct ipc_space */
    KSTRUCT_OFFSET_IPC_SPACE_IS_TABLE_SIZE,
    KSTRUCT_OFFSET_IPC_SPACE_IS_TABLE,
    KSTRUCT_OFFSET_IPC_SPACE_IS_TASK,

    /* struct vnode */
    KSTRUCT_OFFSET_VNODE_V_MOUNT,
    KSTRUCT_OFFSET_VNODE_VU_SPECINFO,
    KSTRUCT_OFFSET_VNODE_V_LOCK,
    KSTRUCT_OFFSET_VNODE_V_DATA,
    
    /* struct specinfo */
    KSTRUCT_OFFSET_SPECINFO_SI_FLAGS,
    
    /* struct mount */
    KSTRUCT_OFFSET_MOUNT_MNT_FLAG,
    KSTRUCT_OFFSET_MOUNT_MNT_DATA,
    KSTRUCT_OFFSET_MOUNT_MNT_MLOCK,
    KSTRUCT_OFFSET_MOUNT_MNT_DEVVP,
    KSTRUCT_OFFSET_MOUNT_NEXT,
    KSTRUCK_OFFSET_MOUNT_VNODELIST,

    /* struct host */
    KSTRUCT_OFFSET_HOST_SPECIAL,
    
    /* struct ucred */
    KSTRUCT_OFFSET_UCRED_CR_REF,
    KSTRUCT_OFFSET_UCRED_CR_UID,
    KSTRUCT_OFFSET_UCRED_CR_RUID,
    KSTRUCT_OFFSET_UCRED_CR_SVUID,
    KSTRUCT_OFFSET_UCRED_CR_NGROUPS,
    KSTRUCT_OFFSET_UCRED_CR_GROUPS,
    KSTRUCT_OFFSET_UCRED_CR_RGID,
    KSTRUCT_OFFSET_UCRED_CR_SVGID,
    KSTRUCT_OFFSET_UCRED_CR_GMUID,
    KSTRUCT_OFFSET_UCRED_CR_FLAGS,
    KSTRUCT_OFFSET_UCRED_CR_LABEL,
    
    /* struct label */
    KSTRUCT_OFFSET_LABEL_L_FLAGS,
    KSTRUCT_OFFSET_LABEL_L_PERPOLICY,
    
    /* struct ipc_entry */
    KSTRUCT_SIZE_IPC_ENTRY,
    KSTRUCT_OFFSET_IPC_ENTRY_IE_BITS,
    
    /* struct vnode */
    KSTRUCT_OFFSET_VNODE_V_FLAG,
    KSTRUCT_OFFSET_VNODE_V_TYPE,
    KSTRUCT_OFFSET_VNODE_V_UBCINFO,
    KSTRUCT_OFFSET_UBCINFO_CSBLOBS,
    KSTRUCT_OFFSET_VNODE_V_NAME,
    KSTRUCT_OFFSET_VNODE_V_PARENT,
    /* vtable OSDictionary */
    KVTABLE_OFFSET_OSDICTIONARY_SETOBJECTWITHCHARP,
    KVTABLE_OFFSET_OSDICTIONARY_GETOBJECTWITHCHARP,
    KVTABLE_OFFSET_OSDICTIONARY_MERGE,
    
    /* vtable OSArray */
    KVTABLE_OFFSET_OSARRAY_MERGE,
    KVTABLE_OFFSET_OSARRAY_REMOVEOBJECT,
    KVTABLE_OFFSET_OSARRAY_GETOBJECT,
    
    /* vtable OSObject */
    KVTABLE_OFFSET_OSOBJECT_RELEASE,
    KVTABLE_OFFSET_OSOBJECT_GETRETAINCOUNT,
    KVTABLE_OFFSET_OSOBJECT_RETAIN,
    
    /* vtable OSString */
    KVTABLE_OFFSET_OSSTRING_GETLENGTH,
    
    KFREE_ADDR_OFFSET,
    
    IOSURFACE_CREATE_OUTSIZE,
    
    KSTRUCT_SANDBOX_SLOT,
    KSTRUCT_SPECFLAGS,
    KSTRUCT_APFS_DATA_FLAG,
    KSTRUCT_AMFI_SLOT,

    OFFSET_GETFI,
};


uint32_t koffset(enum kernel_offset offset);

#endif
